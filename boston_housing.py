# -*- coding: utf-8 -*-
"""Boston_Housing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sGH80Mf8VBd49poeOIVcmK3sQzuGOrUy
"""

from keras.datasets import boston_housing
from keras import models
from keras import layers
import numpy as np


(train_data, train_target), (test_data, test_target) = boston_housing.load_data()

mean = train_data.mean(axis=0)
std = train_data.std(axis=0)

train_data -= mean
train_data /= std
test_data -= mean
test_data /= std

def build_model():
  network = models.Sequential()
  network.add(layers.Dense(64, activation='relu', input_shape=(train_data.shape[1],)))
  network.add(layers.Dense(64, activation='relu'))
  network.add(layers.Dense(1))
  network.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])
  return network

k = 4
num_of_samples = len(train_data) // k
all_scores = []

for i in range(k):
  print('processing fold #',i)
  val_data = train_data[i * num_of_samples : (i+1) * num_of_samples]
  val_target = train_target[i * num_of_samples : (i+1) * num_of_samples]
  remain_data = np.concatenate([train_data[: i * num_of_samples], train_data[(i + 1) * num_of_samples :]], axis = 0)
  remain_target = np.concatenate([train_target[: i * num_of_samples], train_target[(i + 1) * num_of_samples :]], axis = 0)
  model = build_model()
  model.fit(remain_data, remain_target, epochs=100, batch_size=16, verbose=0)
  a,b = model.evaluate(val_data, val_target, verbose = 0)
  all_scores.append(b)

print(all_scores)

print(np.mean(all_scores))