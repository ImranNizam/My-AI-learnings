# -*- coding: utf-8 -*-
"""Cats vs Dogs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12371KW5fSJoItNEJASnYEaLQu3tPPN3_
"""

import os
from keras.preprocessing.image import ImageDataGenerator
from keras import models
from keras import layers
from keras import optimizers
from matplotlib import pyplot as plt
from google.colab import drive

drive.mount('/content/drive')
!ls /content/drive/MyDrive/
folder_path = '/content/drive/MyDrive/dataset'
train_dir = os.path.join(folder_path, 'train')
validation_dir = os.path.join(folder_path, 'validation')


train_data_generator = ImageDataGenerator(rescale = 1./255,
                                         rotation_range = 40,
                                         height_shift_range = 0.2,
                                         width_shift_range = 0.2,
                                         shear_range = 0.2,
                                         zoom_range = 0.2,
                                         horizontal_flip = True,)

validation_data_generator = ImageDataGenerator(rescale = 1./255)

train_generator = train_data_generator.flow_from_directory(train_dir,
                                                           target_size=(150, 150),
                                                           batch_size=20,
                                                           class_mode='binary')

validation_generator = validation_data_generator.flow_from_directory(validation_dir,
                                                                     target_size=(150, 150),
                                                                     batch_size=20,
                                                                     class_mode='binary')


network = models.Sequential()

network.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape = (150, 150, 3)))
network.add(layers.MaxPooling2D((2, 2)))
network.add(layers.Conv2D(64, (3, 3), activation='relu'))
network.add(layers.MaxPooling2D((2, 2)))
network.add(layers.Conv2D(128, (3, 3), activation='relu'))
network.add(layers.MaxPooling2D((2, 2)))
network.add(layers.Conv2D(128, (3, 3), activation='relu'))
network.add(layers.MaxPooling2D((2, 2)))
network.add(layers.Flatten())
network.add(layers.Dense(512, activation='relu'))
network.add(layers.Dense(1, activation='sigmoid'))
network.compile(optimizer=optimizers.RMSprop(learning_rate=1e-4), loss='binary_crossentropy', metrics=['accuracy'])

from tensorflow.keras.preprocessing import image
folder_pat = '/content/drive/MyDrive/dataset/train/cats/cat.1.jpg'

img = image.load_img(folder_pat, target_size = (150, 150))
plt.imshow(img)
plt.show()

history = network.fit(train_generator, steps_per_epoch = 100, epochs = 30, validation_data = validation_generator, validation_steps = 50)

accuracy = history.history['accuracy']
validation_accuracy = history.history['val_accuracy']
loss = history.history['loss']
validation_loss = history.history['val_loss']

epochs = range(1, len(accuracy) + 1)

plt.plot(epochs, accuracy, 'bo', label = 'Tranining Accuracy')
plt.plot(epochs, validation_accuracy, 'b', label = 'Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'bo', label = 'Training Loss')
plt.plot(epochs, validation_loss, 'b', label = 'Validation Loss')
plt.title('Training and Validation Loss')
plt.legend()

plt.show()