# -*- coding: utf-8 -*-
"""MNIST with Convnet2d.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I9zOqGILsNF6-hUSVL3wBzh_rLVuhjcq
"""

from keras.datasets import mnist
from keras import models
from keras import layers
from keras.utils import to_categorical

(train_data, train_labels), (test_data, test_labels) = mnist.load_data()

train_data = train_data.reshape((60000, 28, 28, 1))
train_data = train_data.astype('float32') / 255
test_data = test_data.reshape((10000, 28, 28, 1))
test_data = test_data.astype('float32') / 255
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

val_train_data = train_data[:10000]
val_train_labels = train_labels[:10000]
remain_train_data = train_data[10000 :]
remain_train_labels = train_labels[10000:]

network = models.Sequential()

network.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
network.add(layers.MaxPooling2D((2, 2)))
network.add(layers.Conv2D(64, (3, 3), activation='relu'))
network.add(layers.MaxPooling2D((2, 2)))
network.add(layers.Conv2D(64, (3, 3), activation='relu'))
network.add(layers.Flatten())
network.add(layers.Dense(64, activation='relu'))
network.add(layers.Dense(10, activation='softmax'))

network.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

network.fit(remain_train_data, remain_train_labels, epochs = 3, batch_size = 64, validation_data = (val_train_data, val_train_labels))

a,b = network.evaluate(test_data, test_labels)
print(a,b)